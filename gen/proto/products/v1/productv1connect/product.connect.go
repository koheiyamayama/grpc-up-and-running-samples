// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/products/v1/product.proto

package productv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/koheiyamayama/grpc-up-and-running-samples/gen/proto/products/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "proto.products.v1.ProductService"
)

// ProductServiceClient is a client for the proto.products.v1.ProductService service.
type ProductServiceClient interface {
	GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error)
	ListProducts(context.Context, *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error)
	RegisterProducts(context.Context, *connect_go.Request[v1.RegisterProductsRequest]) (*connect_go.Response[v1.RegisterProductsResponse], error)
	UnregisterProducts(context.Context, *connect_go.Request[v1.UnregisterProductsRequest]) (*connect_go.Response[v1.UnregisterProductsResponse], error)
}

// NewProductServiceClient constructs a client for the proto.products.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productServiceClient{
		getProduct: connect_go.NewClient[v1.GetProductRequest, v1.GetProductResponse](
			httpClient,
			baseURL+"/proto.products.v1.ProductService/GetProduct",
			opts...,
		),
		listProducts: connect_go.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+"/proto.products.v1.ProductService/ListProducts",
			opts...,
		),
		registerProducts: connect_go.NewClient[v1.RegisterProductsRequest, v1.RegisterProductsResponse](
			httpClient,
			baseURL+"/proto.products.v1.ProductService/RegisterProducts",
			opts...,
		),
		unregisterProducts: connect_go.NewClient[v1.UnregisterProductsRequest, v1.UnregisterProductsResponse](
			httpClient,
			baseURL+"/proto.products.v1.ProductService/UnregisterProducts",
			opts...,
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	getProduct         *connect_go.Client[v1.GetProductRequest, v1.GetProductResponse]
	listProducts       *connect_go.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	registerProducts   *connect_go.Client[v1.RegisterProductsRequest, v1.RegisterProductsResponse]
	unregisterProducts *connect_go.Client[v1.UnregisterProductsRequest, v1.UnregisterProductsResponse]
}

// GetProduct calls proto.products.v1.ProductService.GetProduct.
func (c *productServiceClient) GetProduct(ctx context.Context, req *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// ListProducts calls proto.products.v1.ProductService.ListProducts.
func (c *productServiceClient) ListProducts(ctx context.Context, req *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// RegisterProducts calls proto.products.v1.ProductService.RegisterProducts.
func (c *productServiceClient) RegisterProducts(ctx context.Context, req *connect_go.Request[v1.RegisterProductsRequest]) (*connect_go.Response[v1.RegisterProductsResponse], error) {
	return c.registerProducts.CallUnary(ctx, req)
}

// UnregisterProducts calls proto.products.v1.ProductService.UnregisterProducts.
func (c *productServiceClient) UnregisterProducts(ctx context.Context, req *connect_go.Request[v1.UnregisterProductsRequest]) (*connect_go.Response[v1.UnregisterProductsResponse], error) {
	return c.unregisterProducts.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the proto.products.v1.ProductService service.
type ProductServiceHandler interface {
	GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error)
	ListProducts(context.Context, *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error)
	RegisterProducts(context.Context, *connect_go.Request[v1.RegisterProductsRequest]) (*connect_go.Response[v1.RegisterProductsResponse], error)
	UnregisterProducts(context.Context, *connect_go.Request[v1.UnregisterProductsRequest]) (*connect_go.Response[v1.UnregisterProductsResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.products.v1.ProductService/GetProduct", connect_go.NewUnaryHandler(
		"/proto.products.v1.ProductService/GetProduct",
		svc.GetProduct,
		opts...,
	))
	mux.Handle("/proto.products.v1.ProductService/ListProducts", connect_go.NewUnaryHandler(
		"/proto.products.v1.ProductService/ListProducts",
		svc.ListProducts,
		opts...,
	))
	mux.Handle("/proto.products.v1.ProductService/RegisterProducts", connect_go.NewUnaryHandler(
		"/proto.products.v1.ProductService/RegisterProducts",
		svc.RegisterProducts,
		opts...,
	))
	mux.Handle("/proto.products.v1.ProductService/UnregisterProducts", connect_go.NewUnaryHandler(
		"/proto.products.v1.ProductService/UnregisterProducts",
		svc.UnregisterProducts,
		opts...,
	))
	return "/proto.products.v1.ProductService/", mux
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.products.v1.ProductService.GetProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProducts(context.Context, *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.products.v1.ProductService.ListProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) RegisterProducts(context.Context, *connect_go.Request[v1.RegisterProductsRequest]) (*connect_go.Response[v1.RegisterProductsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.products.v1.ProductService.RegisterProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) UnregisterProducts(context.Context, *connect_go.Request[v1.UnregisterProductsRequest]) (*connect_go.Response[v1.UnregisterProductsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.products.v1.ProductService.UnregisterProducts is not implemented"))
}
